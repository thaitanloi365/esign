// Copyright 2019 James Cote
// All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by gen-esign; DO NOT EDIT.

// Package accounts implements the DocuSign SDK
// category Accounts.
//
// Use the Account category for various account management tasks including:
//
// * Programmatically creating and deleting accounts.
// * Getting information about an account and its capabilities.
// * Branding the account with custom colors, message text, and more.
// * Account charges.
//
// The Account category also includes end points for
// * Listing the recipient names associated with an email address that was used by the account. For example, a single email address is often shared by mulitple members of a family.
//
// Service Api documentation may be found at:
// https://developers.docusign.com/esign-rest-api/v2/reference/Accounts
// Usage example:
//
//   import (
//       "github.com/thaitanloi365/esign"
//       "github.com/thaitanloi365/esign/v2/accounts"
//       "github.com/thaitanloi365/esign/v2/model"
//   )
//   ...
//   accountsService := accounts.New(esignCredential)
package accounts // import "github.com/thaitanloi365/esign/v2/accounts"

import (
	"context"
	"fmt"
	"io"
	"net/url"
	"strings"

	"github.com/thaitanloi365/esign"
	"github.com/thaitanloi365/esign/v2/model"
)

// Service implements DocuSign Accounts Category API operations
type Service struct {
	credential esign.Credential
}

// New initializes a accounts service using cred to authorize ops.
func New(cred esign.Credential) *Service {
	return &Service{credential: cred}
}

// BrandsCreate creates one or more brand profile files for the account.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountbrands/create
//
// SDK Method Accounts::createBrand
func (s *Service) BrandsCreate(brand *model.Brand) *BrandsCreateOp {
	return &BrandsCreateOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       "brands",
		Payload:    brand,
		QueryOpts:  make(url.Values),
	}
}

// BrandsCreateOp implements DocuSign API SDK Accounts::createBrand
type BrandsCreateOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BrandsCreateOp) Do(ctx context.Context) (*model.BrandsResponse, error) {
	var res *model.BrandsResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// BrandsDelete removes a brand.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountbrands/delete
//
// SDK Method Accounts::deleteBrand
func (s *Service) BrandsDelete(brandID string) *BrandsDeleteOp {
	return &BrandsDeleteOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       strings.Join([]string{"brands", brandID}, "/"),
		QueryOpts:  make(url.Values),
	}
}

// BrandsDeleteOp implements DocuSign API SDK Accounts::deleteBrand
type BrandsDeleteOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BrandsDeleteOp) Do(ctx context.Context) error {
	return ((*esign.Op)(op)).Do(ctx, nil)
}

// BrandsDeleteList deletes one or more brand profiles.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountbrands/deletelist
//
// SDK Method Accounts::deleteBrands
func (s *Service) BrandsDeleteList(brandsRequest *model.BrandsRequest) *BrandsDeleteListOp {
	return &BrandsDeleteListOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       "brands",
		Payload:    brandsRequest,
		QueryOpts:  make(url.Values),
	}
}

// BrandsDeleteListOp implements DocuSign API SDK Accounts::deleteBrands
type BrandsDeleteListOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BrandsDeleteListOp) Do(ctx context.Context) (*model.BrandsResponse, error) {
	var res *model.BrandsResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// BrandsDeleteLogo delete one branding logo.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountbrands/deletelogo
//
// SDK Method Accounts::deleteBrandLogoByType
func (s *Service) BrandsDeleteLogo(brandID string, logoType string) *BrandsDeleteLogoOp {
	return &BrandsDeleteLogoOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       strings.Join([]string{"brands", brandID, "logos", logoType}, "/"),
		QueryOpts:  make(url.Values),
	}
}

// BrandsDeleteLogoOp implements DocuSign API SDK Accounts::deleteBrandLogoByType
type BrandsDeleteLogoOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BrandsDeleteLogoOp) Do(ctx context.Context) error {
	return ((*esign.Op)(op)).Do(ctx, nil)
}

// BrandsGet get information for a specific brand.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountbrands/get
//
// SDK Method Accounts::getBrand
func (s *Service) BrandsGet(brandID string) *BrandsGetOp {
	return &BrandsGetOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"brands", brandID}, "/"),
		QueryOpts:  make(url.Values),
	}
}

// BrandsGetOp implements DocuSign API SDK Accounts::getBrand
type BrandsGetOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BrandsGetOp) Do(ctx context.Context) (*model.Brand, error) {
	var res *model.Brand
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// IncludeExternalReferences set the call query parameter include_external_references
func (op *BrandsGetOp) IncludeExternalReferences() *BrandsGetOp {
	if op != nil {
		op.QueryOpts.Set("include_external_references", "true")
	}
	return op
}

// IncludeLogos set the call query parameter include_logos
func (op *BrandsGetOp) IncludeLogos() *BrandsGetOp {
	if op != nil {
		op.QueryOpts.Set("include_logos", "true")
	}
	return op
}

// BrandsGetExportFile export a specific brand.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountbrands/getexportfile
//
// SDK Method Accounts::getBrandExportFile
func (s *Service) BrandsGetExportFile(brandID string) *BrandsGetExportFileOp {
	return &BrandsGetExportFileOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"brands", brandID, "file"}, "/"),
		QueryOpts:  make(url.Values),
	}
}

// BrandsGetExportFileOp implements DocuSign API SDK Accounts::getBrandExportFile
type BrandsGetExportFileOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BrandsGetExportFileOp) Do(ctx context.Context) (*esign.Download, error) {
	var res *esign.Download
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// BrandsGetLogo obtains the specified image for a brand.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountbrands/getlogo
//
// SDK Method Accounts::getBrandLogoByType
func (s *Service) BrandsGetLogo(brandID string, logoType string) *BrandsGetLogoOp {
	return &BrandsGetLogoOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"brands", brandID, "logos", logoType}, "/"),
		Accept:     "image/png",
		QueryOpts:  make(url.Values),
	}
}

// BrandsGetLogoOp implements DocuSign API SDK Accounts::getBrandLogoByType
type BrandsGetLogoOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BrandsGetLogoOp) Do(ctx context.Context) (*esign.Download, error) {
	var res *esign.Download
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// BrandsGetResource returns the specified branding resource file.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountbrands/getresource
//
// SDK Method Accounts::getBrandResourcesByContentType
func (s *Service) BrandsGetResource(brandID string, resourceContentType string) *BrandsGetResourceOp {
	return &BrandsGetResourceOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"brands", brandID, "resources", resourceContentType}, "/"),
		QueryOpts:  make(url.Values),
	}
}

// BrandsGetResourceOp implements DocuSign API SDK Accounts::getBrandResourcesByContentType
type BrandsGetResourceOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BrandsGetResourceOp) Do(ctx context.Context) (*esign.Download, error) {
	var res *esign.Download
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Langcode set the call query parameter langcode
func (op *BrandsGetResourceOp) Langcode(val string) *BrandsGetResourceOp {
	if op != nil {
		op.QueryOpts.Set("langcode", val)
	}
	return op
}

// ReturnMaster set the call query parameter return_master
func (op *BrandsGetResourceOp) ReturnMaster() *BrandsGetResourceOp {
	if op != nil {
		op.QueryOpts.Set("return_master", "true")
	}
	return op
}

// BrandsList gets a list of brand profiles.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountbrands/list
//
// SDK Method Accounts::listBrands
func (s *Service) BrandsList() *BrandsListOp {
	return &BrandsListOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "brands",
		QueryOpts:  make(url.Values),
	}
}

// BrandsListOp implements DocuSign API SDK Accounts::listBrands
type BrandsListOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BrandsListOp) Do(ctx context.Context) (*model.BrandsResponse, error) {
	var res *model.BrandsResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// ExcludeDistributorBrand when set to **true**, excludes distributor brand information from the response set.
func (op *BrandsListOp) ExcludeDistributorBrand() *BrandsListOp {
	if op != nil {
		op.QueryOpts.Set("exclude_distributor_brand", "true")
	}
	return op
}

// IncludeLogos when set to **true**, returns the logos associated with the brand.
func (op *BrandsListOp) IncludeLogos() *BrandsListOp {
	if op != nil {
		op.QueryOpts.Set("include_logos", "true")
	}
	return op
}

// BrandsListResources returns the specified account's list of branding resources (metadata).
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountbrands/listresources
//
// SDK Method Accounts::getBrandResources
func (s *Service) BrandsListResources(brandID string) *BrandsListResourcesOp {
	return &BrandsListResourcesOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"brands", brandID, "resources"}, "/"),
		QueryOpts:  make(url.Values),
	}
}

// BrandsListResourcesOp implements DocuSign API SDK Accounts::getBrandResources
type BrandsListResourcesOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BrandsListResourcesOp) Do(ctx context.Context) (*model.BrandResourcesList, error) {
	var res *model.BrandResourcesList
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// BrandsUpdate updates an existing brand.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountbrands/update
//
// SDK Method Accounts::updateBrand
func (s *Service) BrandsUpdate(brandID string, brand *model.Brand) *BrandsUpdateOp {
	return &BrandsUpdateOp{
		Credential: s.credential,
		Method:     "PUT",
		Path:       strings.Join([]string{"brands", brandID}, "/"),
		Payload:    brand,
		QueryOpts:  make(url.Values),
	}
}

// BrandsUpdateOp implements DocuSign API SDK Accounts::updateBrand
type BrandsUpdateOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BrandsUpdateOp) Do(ctx context.Context) (*model.Brand, error) {
	var res *model.Brand
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// BrandsUpdateLogo put one branding logo.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountbrands/updatelogo
//
// SDK Method Accounts::updateBrandLogoByType
func (s *Service) BrandsUpdateLogo(brandID string, logoType string, logoFileBytes []byte) *BrandsUpdateLogoOp {
	return &BrandsUpdateLogoOp{
		Credential: s.credential,
		Method:     "PUT",
		Path:       strings.Join([]string{"brands", brandID, "logos", logoType}, "/"),
		Payload:    logoFileBytes,
		QueryOpts:  make(url.Values),
	}
}

// BrandsUpdateLogoOp implements DocuSign API SDK Accounts::updateBrandLogoByType
type BrandsUpdateLogoOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BrandsUpdateLogoOp) Do(ctx context.Context) error {
	return ((*esign.Op)(op)).Do(ctx, nil)
}

// BrandsUpdateResource uploads a branding resource file.
// If media is an io.ReadCloser, Do() will close media.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountbrands/updateresource
//
// SDK Method Accounts::updateBrandResourcesByContentType
func (s *Service) BrandsUpdateResource(brandID string, resourceContentType string, media io.Reader, mimeType string) *BrandsUpdateResourceOp {
	return &BrandsUpdateResourceOp{
		Credential: s.credential,
		Method:     "PUT",
		Path:       strings.Join([]string{"brands", brandID, "resources", resourceContentType}, "/"),
		Payload:    &esign.UploadFile{Reader: media, ContentType: mimeType},
		QueryOpts:  make(url.Values),
	}
}

// BrandsUpdateResourceOp implements DocuSign API SDK Accounts::updateBrandResourcesByContentType
type BrandsUpdateResourceOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BrandsUpdateResourceOp) Do(ctx context.Context) (*model.BrandResources, error) {
	var res *model.BrandResources
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// ConsumerDisclosuresGet gets the Electronic Record and Signature Disclosure.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountconsumerdisclosures/get
//
// SDK Method Accounts::getConsumerDisclosure
func (s *Service) ConsumerDisclosuresGet(langCode string) *ConsumerDisclosuresGetOp {
	return &ConsumerDisclosuresGetOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"consumer_disclosure", langCode}, "/"),
		QueryOpts:  make(url.Values),
	}
}

// ConsumerDisclosuresGetOp implements DocuSign API SDK Accounts::getConsumerDisclosure
type ConsumerDisclosuresGetOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *ConsumerDisclosuresGetOp) Do(ctx context.Context) (*model.ConsumerDisclosure, error) {
	var res *model.ConsumerDisclosure
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// ConsumerDisclosuresGetDefault gets the Electronic Record and Signature Disclosure for the account.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountconsumerdisclosures/getdefault
//
// SDK Method Accounts::getConsumerDisclosureDefault
func (s *Service) ConsumerDisclosuresGetDefault() *ConsumerDisclosuresGetDefaultOp {
	return &ConsumerDisclosuresGetDefaultOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "consumer_disclosure",
		QueryOpts:  make(url.Values),
	}
}

// ConsumerDisclosuresGetDefaultOp implements DocuSign API SDK Accounts::getConsumerDisclosureDefault
type ConsumerDisclosuresGetDefaultOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *ConsumerDisclosuresGetDefaultOp) Do(ctx context.Context) (*model.ConsumerDisclosure, error) {
	var res *model.ConsumerDisclosure
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// LangCode specifies the language used in the response. The supported languages, with the language value shown in parenthesis, are: Arabic (ar), Bulgarian (bg), Czech (cs), Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Croatian (hr), Danish (da), Dutch (nl), English US (en), English UK (en_GB), Estonian (et), Farsi (fa), Finnish (fi), French (fr), French Canada (fr_CA), German (de), Greek (el), Hebrew (he), Hindi (hi), Hungarian (hu), Bahasa Indonesia (id), Italian (it), Japanese (ja), Korean (ko), Latvian (lv), Lithuanian (lt), Bahasa Melayu (ms), Norwegian (no), Polish (pl), Portuguese (pt), Portuguese Brazil (pt_BR), Romanian (ro), Russian (ru), Serbian (sr), Slovak (sk), Slovenian (sl), Spanish (es),Spanish Latin America (es_MX), Swedish (sv), Thai (th), Turkish (tr), Ukrainian (uk), and Vietnamese (vi).
//
// Additionally, the value can be set to `browser` to automatically detect the browser language being used by the viewer and display the disclosure in that language.
func (op *ConsumerDisclosuresGetDefaultOp) LangCode(val string) *ConsumerDisclosuresGetDefaultOp {
	if op != nil {
		op.QueryOpts.Set("langCode", val)
	}
	return op
}

// ConsumerDisclosuresUpdate update Consumer Disclosure.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountconsumerdisclosures/update
//
// SDK Method Accounts::updateConsumerDisclosure
func (s *Service) ConsumerDisclosuresUpdate(langCode string, envelopeConsumerDisclosures *model.ConsumerDisclosure) *ConsumerDisclosuresUpdateOp {
	return &ConsumerDisclosuresUpdateOp{
		Credential: s.credential,
		Method:     "PUT",
		Path:       strings.Join([]string{"consumer_disclosure", langCode}, "/"),
		Payload:    envelopeConsumerDisclosures,
		QueryOpts:  make(url.Values),
	}
}

// ConsumerDisclosuresUpdateOp implements DocuSign API SDK Accounts::updateConsumerDisclosure
type ConsumerDisclosuresUpdateOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *ConsumerDisclosuresUpdateOp) Do(ctx context.Context) (*model.ConsumerDisclosure, error) {
	var res *model.ConsumerDisclosure
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// IncludeMetadata reserved for DocuSign.
func (op *ConsumerDisclosuresUpdateOp) IncludeMetadata(val string) *ConsumerDisclosuresUpdateOp {
	if op != nil {
		op.QueryOpts.Set("include_metadata", val)
	}
	return op
}

// CustomFieldsCreate creates an acount custom field.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountcustomfields/create
//
// SDK Method Accounts::createCustomField
func (s *Service) CustomFieldsCreate(customField *model.CustomField) *CustomFieldsCreateOp {
	return &CustomFieldsCreateOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       "custom_fields",
		Payload:    customField,
		QueryOpts:  make(url.Values),
	}
}

// CustomFieldsCreateOp implements DocuSign API SDK Accounts::createCustomField
type CustomFieldsCreateOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *CustomFieldsCreateOp) Do(ctx context.Context) (*model.CustomFields, error) {
	var res *model.CustomFields
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// ApplyToTemplates set the call query parameter apply_to_templates
func (op *CustomFieldsCreateOp) ApplyToTemplates() *CustomFieldsCreateOp {
	if op != nil {
		op.QueryOpts.Set("apply_to_templates", "true")
	}
	return op
}

// CustomFieldsDelete delete an existing account custom field.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountcustomfields/delete
//
// SDK Method Accounts::deleteCustomField
func (s *Service) CustomFieldsDelete(customFieldID string) *CustomFieldsDeleteOp {
	return &CustomFieldsDeleteOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       strings.Join([]string{"custom_fields", customFieldID}, "/"),
		QueryOpts:  make(url.Values),
	}
}

// CustomFieldsDeleteOp implements DocuSign API SDK Accounts::deleteCustomField
type CustomFieldsDeleteOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *CustomFieldsDeleteOp) Do(ctx context.Context) error {
	return ((*esign.Op)(op)).Do(ctx, nil)
}

// ApplyToTemplates set the call query parameter apply_to_templates
func (op *CustomFieldsDeleteOp) ApplyToTemplates() *CustomFieldsDeleteOp {
	if op != nil {
		op.QueryOpts.Set("apply_to_templates", "true")
	}
	return op
}

// CustomFieldsList gets a list of custom fields associated with the account.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountcustomfields/list
//
// SDK Method Accounts::listCustomFields
func (s *Service) CustomFieldsList() *CustomFieldsListOp {
	return &CustomFieldsListOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "custom_fields",
		QueryOpts:  make(url.Values),
	}
}

// CustomFieldsListOp implements DocuSign API SDK Accounts::listCustomFields
type CustomFieldsListOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *CustomFieldsListOp) Do(ctx context.Context) (*model.CustomFields, error) {
	var res *model.CustomFields
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// CustomFieldsUpdate updates an existing account custom field.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountcustomfields/update
//
// SDK Method Accounts::updateCustomField
func (s *Service) CustomFieldsUpdate(customFieldID string, customField *model.CustomField) *CustomFieldsUpdateOp {
	return &CustomFieldsUpdateOp{
		Credential: s.credential,
		Method:     "PUT",
		Path:       strings.Join([]string{"custom_fields", customFieldID}, "/"),
		Payload:    customField,
		QueryOpts:  make(url.Values),
	}
}

// CustomFieldsUpdateOp implements DocuSign API SDK Accounts::updateCustomField
type CustomFieldsUpdateOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *CustomFieldsUpdateOp) Do(ctx context.Context) (*model.CustomFields, error) {
	var res *model.CustomFields
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// ApplyToTemplates set the call query parameter apply_to_templates
func (op *CustomFieldsUpdateOp) ApplyToTemplates() *CustomFieldsUpdateOp {
	if op != nil {
		op.QueryOpts.Set("apply_to_templates", "true")
	}
	return op
}

// PasswordRulesGet get the password rules
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountpasswordrules/get
//
// SDK Method Accounts::getAccountPasswordRules
func (s *Service) PasswordRulesGet() *PasswordRulesGetOp {
	return &PasswordRulesGetOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "settings/password_rules",
		QueryOpts:  make(url.Values),
	}
}

// PasswordRulesGetOp implements DocuSign API SDK Accounts::getAccountPasswordRules
type PasswordRulesGetOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *PasswordRulesGetOp) Do(ctx context.Context) (*model.AccountPasswordRules, error) {
	var res *model.AccountPasswordRules
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// PasswordRulesGetForUser get membership account password rules
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountpasswordrules/getforuser
//
// SDK Method Accounts::getPasswordRules
func (s *Service) PasswordRulesGetForUser() *PasswordRulesGetForUserOp {
	return &PasswordRulesGetForUserOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "/v2/current_user/password_rules",
		QueryOpts:  make(url.Values),
	}
}

// PasswordRulesGetForUserOp implements DocuSign API SDK Accounts::getPasswordRules
type PasswordRulesGetForUserOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *PasswordRulesGetForUserOp) Do(ctx context.Context) (*model.UserPasswordRules, error) {
	var res *model.UserPasswordRules
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// PasswordRulesUpdate update the password rules
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountpasswordrules/update
//
// SDK Method Accounts::updateAccountPasswordRules
func (s *Service) PasswordRulesUpdate(accountPasswordRules *model.AccountPasswordRules) *PasswordRulesUpdateOp {
	return &PasswordRulesUpdateOp{
		Credential: s.credential,
		Method:     "PUT",
		Path:       "settings/password_rules",
		Payload:    accountPasswordRules,
		QueryOpts:  make(url.Values),
	}
}

// PasswordRulesUpdateOp implements DocuSign API SDK Accounts::updateAccountPasswordRules
type PasswordRulesUpdateOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *PasswordRulesUpdateOp) Do(ctx context.Context) (*model.AccountPasswordRules, error) {
	var res *model.AccountPasswordRules
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// PermissionProfilesCreate creates a new permission profile in the specified account.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountpermissionprofiles/create
//
// SDK Method Accounts::createPermissionProfile
func (s *Service) PermissionProfilesCreate(accountPermissionProfiles *model.PermissionProfile) *PermissionProfilesCreateOp {
	return &PermissionProfilesCreateOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       "permission_profiles",
		Payload:    accountPermissionProfiles,
		QueryOpts:  make(url.Values),
	}
}

// PermissionProfilesCreateOp implements DocuSign API SDK Accounts::createPermissionProfile
type PermissionProfilesCreateOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *PermissionProfilesCreateOp) Do(ctx context.Context) (*model.PermissionProfile, error) {
	var res *model.PermissionProfile
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Include is a comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications.
func (op *PermissionProfilesCreateOp) Include(val ...string) *PermissionProfilesCreateOp {
	if op != nil {
		op.QueryOpts.Set("include", strings.Join(val, ","))
	}
	return op
}

// PermissionProfilesDelete deletes a permissions profile within the specified account.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountpermissionprofiles/delete
//
// SDK Method Accounts::deletePermissionProfile
func (s *Service) PermissionProfilesDelete(permissionProfileID string) *PermissionProfilesDeleteOp {
	return &PermissionProfilesDeleteOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       strings.Join([]string{"permission_profiles", permissionProfileID}, "/"),
		QueryOpts:  make(url.Values),
	}
}

// PermissionProfilesDeleteOp implements DocuSign API SDK Accounts::deletePermissionProfile
type PermissionProfilesDeleteOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *PermissionProfilesDeleteOp) Do(ctx context.Context) error {
	return ((*esign.Op)(op)).Do(ctx, nil)
}

// PermissionProfilesGet returns a permissions profile in the specified account.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountpermissionprofiles/get
//
// SDK Method Accounts::getPermissionProfile
func (s *Service) PermissionProfilesGet(permissionProfileID string) *PermissionProfilesGetOp {
	return &PermissionProfilesGetOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"permission_profiles", permissionProfileID}, "/"),
		QueryOpts:  make(url.Values),
	}
}

// PermissionProfilesGetOp implements DocuSign API SDK Accounts::getPermissionProfile
type PermissionProfilesGetOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *PermissionProfilesGetOp) Do(ctx context.Context) (*model.PermissionProfile, error) {
	var res *model.PermissionProfile
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Include is a comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications.
func (op *PermissionProfilesGetOp) Include(val ...string) *PermissionProfilesGetOp {
	if op != nil {
		op.QueryOpts.Set("include", strings.Join(val, ","))
	}
	return op
}

// PermissionProfilesList gets a list of permission profiles.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountpermissionprofiles/list
//
// SDK Method Accounts::listPermissions
func (s *Service) PermissionProfilesList() *PermissionProfilesListOp {
	return &PermissionProfilesListOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "permission_profiles",
		QueryOpts:  make(url.Values),
	}
}

// PermissionProfilesListOp implements DocuSign API SDK Accounts::listPermissions
type PermissionProfilesListOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *PermissionProfilesListOp) Do(ctx context.Context) (*model.PermissionProfileInformation, error) {
	var res *model.PermissionProfileInformation
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Include reserved for DocuSign.
func (op *PermissionProfilesListOp) Include(val string) *PermissionProfilesListOp {
	if op != nil {
		op.QueryOpts.Set("include", val)
	}
	return op
}

// PermissionProfilesUpdate updates a permission profile within the specified account.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountpermissionprofiles/update
//
// SDK Method Accounts::updatePermissionProfile
func (s *Service) PermissionProfilesUpdate(permissionProfileID string, accountPermissionProfiles *model.PermissionProfile) *PermissionProfilesUpdateOp {
	return &PermissionProfilesUpdateOp{
		Credential: s.credential,
		Method:     "PUT",
		Path:       strings.Join([]string{"permission_profiles", permissionProfileID}, "/"),
		Payload:    accountPermissionProfiles,
		QueryOpts:  make(url.Values),
	}
}

// PermissionProfilesUpdateOp implements DocuSign API SDK Accounts::updatePermissionProfile
type PermissionProfilesUpdateOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *PermissionProfilesUpdateOp) Do(ctx context.Context) (*model.PermissionProfile, error) {
	var res *model.PermissionProfile
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Include is a comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications.
func (op *PermissionProfilesUpdateOp) Include(val ...string) *PermissionProfilesUpdateOp {
	if op != nil {
		op.QueryOpts.Set("include", strings.Join(val, ","))
	}
	return op
}

// SignatureProvidersList returns Account available signature providers for specified account.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountsignatureproviders/list
//
// SDK Method Accounts::listSignatureProviders
func (s *Service) SignatureProvidersList() *SignatureProvidersListOp {
	return &SignatureProvidersListOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "signatureProviders",
		QueryOpts:  make(url.Values),
	}
}

// SignatureProvidersListOp implements DocuSign API SDK Accounts::listSignatureProviders
type SignatureProvidersListOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *SignatureProvidersListOp) Do(ctx context.Context) (*model.AccountSignatureProviders, error) {
	var res *model.AccountSignatureProviders
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// TabSettingsGet returns tab settings list for specified account
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accounttabsettings/get
//
// SDK Method Accounts::getAccountTabSettings
func (s *Service) TabSettingsGet() *TabSettingsGetOp {
	return &TabSettingsGetOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "settings/tabs",
		QueryOpts:  make(url.Values),
	}
}

// TabSettingsGetOp implements DocuSign API SDK Accounts::getAccountTabSettings
type TabSettingsGetOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *TabSettingsGetOp) Do(ctx context.Context) (*model.TabAccountSettings, error) {
	var res *model.TabAccountSettings
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// TabSettingsUpdate modifies tab settings for specified account
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accounttabsettings/update
//
// SDK Method Accounts::updateAccountTabSettings
func (s *Service) TabSettingsUpdate(accountTabSettings *model.TabAccountSettings) *TabSettingsUpdateOp {
	return &TabSettingsUpdateOp{
		Credential: s.credential,
		Method:     "PUT",
		Path:       "settings/tabs",
		Payload:    accountTabSettings,
		QueryOpts:  make(url.Values),
	}
}

// TabSettingsUpdateOp implements DocuSign API SDK Accounts::updateAccountTabSettings
type TabSettingsUpdateOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *TabSettingsUpdateOp) Do(ctx context.Context) (*model.TabAccountSettings, error) {
	var res *model.TabAccountSettings
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// WatermarksGet get watermark information.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountwatermarks/get
//
// SDK Method Accounts::getWatermark
func (s *Service) WatermarksGet() *WatermarksGetOp {
	return &WatermarksGetOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "watermark",
		QueryOpts:  make(url.Values),
	}
}

// WatermarksGetOp implements DocuSign API SDK Accounts::getWatermark
type WatermarksGetOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *WatermarksGetOp) Do(ctx context.Context) (*model.Watermark, error) {
	var res *model.Watermark
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// WatermarksPreview get watermark preview.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountwatermarks/preview
//
// SDK Method Accounts::getWatermarkPreview
func (s *Service) WatermarksPreview(accountWatermarks *model.Watermark) *WatermarksPreviewOp {
	return &WatermarksPreviewOp{
		Credential: s.credential,
		Method:     "PUT",
		Path:       "watermark/preview",
		Payload:    accountWatermarks,
		QueryOpts:  make(url.Values),
	}
}

// WatermarksPreviewOp implements DocuSign API SDK Accounts::getWatermarkPreview
type WatermarksPreviewOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *WatermarksPreviewOp) Do(ctx context.Context) (*model.Watermark, error) {
	var res *model.Watermark
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// WatermarksUpdate update watermark information.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accountwatermarks/update
//
// SDK Method Accounts::updateWatermark
func (s *Service) WatermarksUpdate(accountWatermarks *model.Watermark) *WatermarksUpdateOp {
	return &WatermarksUpdateOp{
		Credential: s.credential,
		Method:     "PUT",
		Path:       "watermark",
		Payload:    accountWatermarks,
		QueryOpts:  make(url.Values),
	}
}

// WatermarksUpdateOp implements DocuSign API SDK Accounts::updateWatermark
type WatermarksUpdateOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *WatermarksUpdateOp) Do(ctx context.Context) (*model.Watermark, error) {
	var res *model.Watermark
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Create creates new accounts.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accounts/create
//
// SDK Method Accounts::create
func (s *Service) Create(newAccountDefinition *model.NewAccountDefinition) *CreateOp {
	return &CreateOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       "/v2/accounts",
		Payload:    newAccountDefinition,
		QueryOpts:  make(url.Values),
	}
}

// CreateOp implements DocuSign API SDK Accounts::create
type CreateOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *CreateOp) Do(ctx context.Context) (*model.NewAccountSummary, error) {
	var res *model.NewAccountSummary
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// PreviewBillingPlan when set to **true**, creates the account using a preview billing plan.
func (op *CreateOp) PreviewBillingPlan() *CreateOp {
	if op != nil {
		op.QueryOpts.Set("preview_billing_plan", "true")
	}
	return op
}

// Delete deletes the specified account.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accounts/delete
//
// SDK Method Accounts::delete
func (s *Service) Delete() *DeleteOp {
	return &DeleteOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       "/v2/accounts/{accountId}",
		QueryOpts:  make(url.Values),
	}
}

// DeleteOp implements DocuSign API SDK Accounts::delete
type DeleteOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *DeleteOp) Do(ctx context.Context) error {
	return ((*esign.Op)(op)).Do(ctx, nil)
}

// DeleteCaptiveRecipient deletes the signature for one or more captive recipient records.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accounts/deletecaptiverecipient
//
// SDK Method Accounts::deleteCaptiveRecipient
func (s *Service) DeleteCaptiveRecipient(recipientPart string, captiveRecipientInformation *model.CaptiveRecipientInformation) *DeleteCaptiveRecipientOp {
	return &DeleteCaptiveRecipientOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       strings.Join([]string{"captive_recipients", recipientPart}, "/"),
		Payload:    captiveRecipientInformation,
		QueryOpts:  make(url.Values),
	}
}

// DeleteCaptiveRecipientOp implements DocuSign API SDK Accounts::deleteCaptiveRecipient
type DeleteCaptiveRecipientOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *DeleteCaptiveRecipientOp) Do(ctx context.Context) (*model.CaptiveRecipientInformation, error) {
	var res *model.CaptiveRecipientInformation
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Get retrieves the account information for the specified account.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accounts/get
//
// SDK Method Accounts::GetAccountInformation
func (s *Service) Get() *GetOp {
	return &GetOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "/v2/accounts/{accountId}",
		QueryOpts:  make(url.Values),
	}
}

// GetOp implements DocuSign API SDK Accounts::GetAccountInformation
type GetOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetOp) Do(ctx context.Context) (*model.AccountInformation, error) {
	var res *model.AccountInformation
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// IncludeAccountSettings when set to **true**, includes the account settings for the account in the response.
func (op *GetOp) IncludeAccountSettings() *GetOp {
	if op != nil {
		op.QueryOpts.Set("include_account_settings", "true")
	}
	return op
}

// GetBillingCharges gets list of recurring and usage charges for the account.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accounts/getbillingcharges
//
// SDK Method Accounts::getBillingCharges
func (s *Service) GetBillingCharges() *GetBillingChargesOp {
	return &GetBillingChargesOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "billing_charges",
		QueryOpts:  make(url.Values),
	}
}

// GetBillingChargesOp implements DocuSign API SDK Accounts::getBillingCharges
type GetBillingChargesOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetBillingChargesOp) Do(ctx context.Context) (*model.BillingChargeResponse, error) {
	var res *model.BillingChargeResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// IncludeCharges specifies which billing charges to return.
// Valid values are:
//
// * envelopes
// * seats
func (op *GetBillingChargesOp) IncludeCharges(val string) *GetBillingChargesOp {
	if op != nil {
		op.QueryOpts.Set("include_charges", val)
	}
	return op
}

// GetProvisioning retrieves the account provisioning information for the account.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accounts/getprovisioning
//
// SDK Method Accounts::getProvisioning
func (s *Service) GetProvisioning() *GetProvisioningOp {
	return &GetProvisioningOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "/v2/accounts/provisioning",
		QueryOpts:  make(url.Values),
	}
}

// GetProvisioningOp implements DocuSign API SDK Accounts::getProvisioning
type GetProvisioningOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *GetProvisioningOp) Do(ctx context.Context) (*model.ProvisioningInformation, error) {
	var res *model.ProvisioningInformation
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// ListRecipientNamesByEmail gets recipient names associated with an email address.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accounts/listrecipientnamesbyemail
//
// SDK Method Accounts::listRecipientNamesByEmail
func (s *Service) ListRecipientNamesByEmail() *ListRecipientNamesByEmailOp {
	return &ListRecipientNamesByEmailOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "recipient_names",
		QueryOpts:  make(url.Values),
	}
}

// ListRecipientNamesByEmailOp implements DocuSign API SDK Accounts::listRecipientNamesByEmail
type ListRecipientNamesByEmailOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *ListRecipientNamesByEmailOp) Do(ctx context.Context) (*model.RecipientNamesResponse, error) {
	var res *model.RecipientNamesResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Email is the email address for the user
func (op *ListRecipientNamesByEmailOp) Email(val string) *ListRecipientNamesByEmailOp {
	if op != nil {
		op.QueryOpts.Set("email", val)
	}
	return op
}

// ListSettings gets account settings information.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accounts/listsettings
//
// SDK Method Accounts::listSettings
func (s *Service) ListSettings() *ListSettingsOp {
	return &ListSettingsOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "settings",
		QueryOpts:  make(url.Values),
	}
}

// ListSettingsOp implements DocuSign API SDK Accounts::listSettings
type ListSettingsOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *ListSettingsOp) Do(ctx context.Context) (*model.AccountSettingsInformation, error) {
	var res *model.AccountSettingsInformation
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// ListSharedAccess reserved: Gets the shared item status for one or more users.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accounts/listsharedaccess
//
// SDK Method Accounts::listSharedAccess
func (s *Service) ListSharedAccess() *ListSharedAccessOp {
	return &ListSharedAccessOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "shared_access",
		QueryOpts:  make(url.Values),
	}
}

// ListSharedAccessOp implements DocuSign API SDK Accounts::listSharedAccess
type ListSharedAccessOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *ListSharedAccessOp) Do(ctx context.Context) (*model.AccountSharedAccess, error) {
	var res *model.AccountSharedAccess
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Count specifies maximum number of results included in the response. If no value is specified, this defaults to 1000.
func (op *ListSharedAccessOp) Count(val int) *ListSharedAccessOp {
	if op != nil {
		op.QueryOpts.Set("count", fmt.Sprintf("%d", val))
	}
	return op
}

// EnvelopesNotSharedUserStatus set the call query parameter envelopes_not_shared_user_status
func (op *ListSharedAccessOp) EnvelopesNotSharedUserStatus(val string) *ListSharedAccessOp {
	if op != nil {
		op.QueryOpts.Set("envelopes_not_shared_user_status", val)
	}
	return op
}

// FolderIds is a comma separated list of folder IDs  for which the shared item
// information is being requested.
//
// If `item_type` is `folders`, at least one folder ID is required.
func (op *ListSharedAccessOp) FolderIds(val ...string) *ListSharedAccessOp {
	if op != nil {
		op.QueryOpts.Set("folder_ids", strings.Join(val, ","))
	}
	return op
}

// ItemType specifies the type of shared item being requested. The possible values are:
//
// - `envelopes`: Get information about envelope sharing between users.
// - `templates`: Get information about template sharing among users and groups.
// - `folders`: Get information about folder sharing among users and groups.
func (op *ListSharedAccessOp) ItemType(val string) *ListSharedAccessOp {
	if op != nil {
		op.QueryOpts.Set("item_type", val)
	}
	return op
}

// SearchText this can be used to filter user names in the response. The wild-card '*' (asterisk) can be used around the string.
func (op *ListSharedAccessOp) SearchText(val string) *ListSharedAccessOp {
	if op != nil {
		op.QueryOpts.Set("search_text", val)
	}
	return op
}

// Shared is a comma-separated list of sharing filters that specifies which users appear in the response.
//
// - `not_shared`: The response contains users who do not share items of `item_type` with the current user.
//
// - `shared_to`: The response contains users in `user_list` who are sharing items to current user.
//
// - `shared_from`: The response contains users in `user_list` who are sharing items from the current user.
//
// - `shared_to_and_from`: The response contains users in `user_list` who are sharing items to and sharing items from the current user.
//
// If the current user does not have administrative privileges, only the `shared_to` option is valid.
func (op *ListSharedAccessOp) Shared(val string) *ListSharedAccessOp {
	if op != nil {
		op.QueryOpts.Set("shared", val)
	}
	return op
}

// StartPosition if the number of responses is greater than `count`, the number of responses to skip. Typically this value is a multiple of `count`. Default: 0.
func (op *ListSharedAccessOp) StartPosition(val int) *ListSharedAccessOp {
	if op != nil {
		op.QueryOpts.Set("start_position", fmt.Sprintf("%d", val))
	}
	return op
}

// UserIds is a comma-separated list of user IDs for whom the shared item information is being requested.
func (op *ListSharedAccessOp) UserIds(val ...string) *ListSharedAccessOp {
	if op != nil {
		op.QueryOpts.Set("user_ids", strings.Join(val, ","))
	}
	return op
}

// ListSupportedLanguages list supported languages for the recipient language setting
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accounts/listsupportedlanguages
//
// SDK Method Accounts::getSupportedLanguages
func (s *Service) ListSupportedLanguages() *ListSupportedLanguagesOp {
	return &ListSupportedLanguagesOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "supported_languages",
		QueryOpts:  make(url.Values),
	}
}

// ListSupportedLanguagesOp implements DocuSign API SDK Accounts::getSupportedLanguages
type ListSupportedLanguagesOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *ListSupportedLanguagesOp) Do(ctx context.Context) (*model.SupportedLanguages, error) {
	var res *model.SupportedLanguages
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// ListUnsupportedFileTypes gets a list of unsupported file types.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accounts/listunsupportedfiletypes
//
// SDK Method Accounts::listUnsupportedFileTypes
func (s *Service) ListUnsupportedFileTypes() *ListUnsupportedFileTypesOp {
	return &ListUnsupportedFileTypesOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "unsupported_file_types",
		QueryOpts:  make(url.Values),
	}
}

// ListUnsupportedFileTypesOp implements DocuSign API SDK Accounts::listUnsupportedFileTypes
type ListUnsupportedFileTypesOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *ListUnsupportedFileTypesOp) Do(ctx context.Context) (*model.FileTypeList, error) {
	var res *model.FileTypeList
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// UpdateSettings updates the account settings for an account.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accounts/updatesettings
//
// SDK Method Accounts::updateSettings
func (s *Service) UpdateSettings(accountSettingsInformation *model.AccountSettingsInformation) *UpdateSettingsOp {
	return &UpdateSettingsOp{
		Credential: s.credential,
		Method:     "PUT",
		Path:       "settings",
		Payload:    accountSettingsInformation,
		QueryOpts:  make(url.Values),
	}
}

// UpdateSettingsOp implements DocuSign API SDK Accounts::updateSettings
type UpdateSettingsOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *UpdateSettingsOp) Do(ctx context.Context) error {
	return ((*esign.Op)(op)).Do(ctx, nil)
}

// UpdateSharedAccess reserved: Sets the shared access information for users.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/accounts/updatesharedaccess
//
// SDK Method Accounts::updateSharedAccess
func (s *Service) UpdateSharedAccess(accountSharedAccess *model.AccountSharedAccess) *UpdateSharedAccessOp {
	return &UpdateSharedAccessOp{
		Credential: s.credential,
		Method:     "PUT",
		Path:       "shared_access",
		Payload:    accountSharedAccess,
		QueryOpts:  make(url.Values),
	}
}

// UpdateSharedAccessOp implements DocuSign API SDK Accounts::updateSharedAccess
type UpdateSharedAccessOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *UpdateSharedAccessOp) Do(ctx context.Context) (*model.AccountSharedAccess, error) {
	var res *model.AccountSharedAccess
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// ItemType specifies the type of shared item being requested. The possible values are:
//
// - `envelopes`: Get information about envelope sharing between users.
// - `templates`: Get information about template sharing among users and groups.
// - `folders`: Get information about folder sharing among users and groups.
func (op *UpdateSharedAccessOp) ItemType(val string) *UpdateSharedAccessOp {
	if op != nil {
		op.QueryOpts.Set("item_type", val)
	}
	return op
}

// UserIds is a comma-separated list of user IDs whose shared item information is being set.
func (op *UpdateSharedAccessOp) UserIds(val ...string) *UpdateSharedAccessOp {
	if op != nil {
		op.QueryOpts.Set("user_ids", strings.Join(val, ","))
	}
	return op
}

// ENoteConfigurationsDelete deletes configuration information for the eNote eOriginal integration.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/enoteconfigurations/delete
//
// SDK Method Accounts::deleteENoteConfiguration
func (s *Service) ENoteConfigurationsDelete() *ENoteConfigurationsDeleteOp {
	return &ENoteConfigurationsDeleteOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       "settings/enote_configuration",
		QueryOpts:  make(url.Values),
	}
}

// ENoteConfigurationsDeleteOp implements DocuSign API SDK Accounts::deleteENoteConfiguration
type ENoteConfigurationsDeleteOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *ENoteConfigurationsDeleteOp) Do(ctx context.Context) error {
	return ((*esign.Op)(op)).Do(ctx, nil)
}

// ENoteConfigurationsGet returns the configuration information for the eNote eOriginal integration.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/enoteconfigurations/get
//
// SDK Method Accounts::getENoteConfiguration
func (s *Service) ENoteConfigurationsGet() *ENoteConfigurationsGetOp {
	return &ENoteConfigurationsGetOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "settings/enote_configuration",
		QueryOpts:  make(url.Values),
	}
}

// ENoteConfigurationsGetOp implements DocuSign API SDK Accounts::getENoteConfiguration
type ENoteConfigurationsGetOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *ENoteConfigurationsGetOp) Do(ctx context.Context) (*model.ENoteConfiguration, error) {
	var res *model.ENoteConfiguration
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// ENoteConfigurationsUpdate updates configuration information for the eNote eOriginal integration.
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/enoteconfigurations/update
//
// SDK Method Accounts::updateENoteConfiguration
func (s *Service) ENoteConfigurationsUpdate(eNoteConfigurations *model.ENoteConfiguration) *ENoteConfigurationsUpdateOp {
	return &ENoteConfigurationsUpdateOp{
		Credential: s.credential,
		Method:     "PUT",
		Path:       "settings/enote_configuration",
		Payload:    eNoteConfigurations,
		QueryOpts:  make(url.Values),
	}
}

// ENoteConfigurationsUpdateOp implements DocuSign API SDK Accounts::updateENoteConfiguration
type ENoteConfigurationsUpdateOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *ENoteConfigurationsUpdateOp) Do(ctx context.Context) (*model.ENoteConfiguration, error) {
	var res *model.ENoteConfiguration
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// PaymentGatewayAccountsList list payment gateway account information
//
// https://developers.docusign.com/esign-rest-api/v2/reference/accounts/paymentgatewayaccounts/list
//
// SDK Method Accounts::getAllPaymentGatewayAccounts
func (s *Service) PaymentGatewayAccountsList() *PaymentGatewayAccountsListOp {
	return &PaymentGatewayAccountsListOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "payment_gateway_accounts",
		QueryOpts:  make(url.Values),
	}
}

// PaymentGatewayAccountsListOp implements DocuSign API SDK Accounts::getAllPaymentGatewayAccounts
type PaymentGatewayAccountsListOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *PaymentGatewayAccountsListOp) Do(ctx context.Context) (*model.PaymentGatewayAccountsInfo, error) {
	var res *model.PaymentGatewayAccountsInfo
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// SealProvidersList is SDK Method Accounts::getSealProviders
//
// https://developers.docusign.com/esign/restapi/Accounts/AccountSealProviders/list
func (s *Service) SealProvidersList() *SealProvidersListOp {
	return &SealProvidersListOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "seals",
		QueryOpts:  make(url.Values),
	}
}

// SealProvidersListOp implements DocuSign API SDK Accounts::getSealProviders
type SealProvidersListOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *SealProvidersListOp) Do(ctx context.Context) (*model.AccountSeals, error) {
	var res *model.AccountSeals
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// IdentityVerificationsList is SDK Method Accounts::getAccountIdentityVerification
//
// https://developers.docusign.com/esign/restapi/Accounts/IdentityVerifications/list
func (s *Service) IdentityVerificationsList() *IdentityVerificationsListOp {
	return &IdentityVerificationsListOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "identity_verification",
		QueryOpts:  make(url.Values),
	}
}

// IdentityVerificationsListOp implements DocuSign API SDK Accounts::getAccountIdentityVerification
type IdentityVerificationsListOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *IdentityVerificationsListOp) Do(ctx context.Context) (*model.AccountIdentityVerificationResponse, error) {
	var res *model.AccountIdentityVerificationResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}
